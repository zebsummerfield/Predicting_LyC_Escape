import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import json

folder = "optimising_model/"

with open(folder+'n_estimators_optimise_data.json', 'r') as f:
    data = json.load(f)
    n_estimators = np.array(data['n_estimators'])
    mean_test_mae = np.array(data['mean_test_mae'])
    mean_test_mse = np.array(data['mean_test_mse'])
    mean_time = np.array(data['mean_time'])

threshold = 0.05
change_mae = (mean_test_mae - mean_test_mae[-1]) / mean_test_mae[-1]
indices_thresh=np.where(change_mae < threshold*0.01)
print(f"minimum number of decision trees where the MAE fractional increase is less than {threshold}\%:")
print(min(n_estimators[indices_thresh]))

plt.style.use('./MNRAS_Style.mplstyle')
mpl.rcParams.update({'font.size': 20})
fig, ax1 = plt.subplots(figsize=(8, 8))

plot1 = ax1.plot(n_estimators, mean_test_mae, label='Test MAE', color='orange')
ax1.set_xlabel('Number of Decision Trees')
ax1.set_ylabel('Test Set Mean Absolute Error (MAE)')
ax1.set_xlim(0, 1000)
ax1.set_ylim(0.454, 0.4585)

ax2 = ax1.twinx()
plot2 = ax2.plot(n_estimators, mean_time, label='Training Time', color='green')
ax2.set_ylabel('Training Time (s)')
ax2.set_xlim(0, 1000)

thresh = ax1.axvline(n_estimators[indices_thresh[0][0]], linestyle='dashdot', label=f'MAE {threshold}\% threshold', c='r')

ax1.set_box_aspect(1)
# add grid lines in background of graph
ax1.grid(True, alpha=0.8, linestyle='--')
ax1.set_axisbelow(True)
for line in ax1.get_xgridlines() + ax1.get_ygridlines():
    line.set_zorder(0)  # lower z-order than image
ax2.grid(False)

plots = [plot1[0], plot2[0], thresh]
labels = [p.get_label() for p in plots]
legend = ax1.legend(plots, labels, fontsize=16, loc='lower right', bbox_to_anchor=(0.95, 0.05))
legend.get_frame().set_edgecolor('black')
legend.get_frame().set_boxstyle('Square')
legend.get_frame().set_alpha(1.0)

fig.tight_layout()
mpl.rcParams['figure.dpi'] = 500
folder = "final_graph_generation/"
fig.savefig(folder + "report_graphs/report_graph.png", bbox_inches='tight', dpi=500)
plt.show()
